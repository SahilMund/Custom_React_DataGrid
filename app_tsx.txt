import React,{ useEffect, useState } from "react";
import "./App.css";
import CustomDataGrid from "./CustomDataGrid";
import axios, { AxiosError } from "axios";

interface User {
  id: number;
  name: string;
  username: string;
  email: string;
  phone: string;
  website: string;
  company: {
    name: string;
  };
  address: {
    street: string;
    suite: string;
    city: string;
  };
}

interface Post {
  userId: number;
  id: number;
  title: string;
  body: string;
}

interface Comment {
  postId: number;
  id: number;
  name: string;
  email: string;
  body: string;
}

type Tab = "users" | "posts" | "comments";

function App() {
  const [activeTab, setActiveTab] = useState<Tab>("users");
  const [data, setData] = useState<any[]>([]);

  const BASE_URI = "https://jsonplaceholder.typicode.com";

  const fetchData = async () => {
    try {
      const response = await axios.get<any[]>(`${BASE_URI}/${activeTab}`);
      setData(response.data);
    } catch (error: any) {
      console.log(error);
    }
  };

  useEffect(() => {
    fetchData();

    if (data && data.length !== 0) {
      storeDataToLocalStorage(activeTab, data);
    }
  }, [activeTab]);

  const handleTabChange = (tab: Tab) => {
    setActiveTab(tab);
  };

  let columns: any[] = [];

  if (activeTab === "posts") {
    columns = [
      { field: "userId", headerName: "User Id", width: 90 },
      { field: "id", headerName: "id", width: 150 },
      { field: "title", headerName: "Title", width: 150 },
      { field: "body", headerName: "Body", width: 110 },
    ];
  } else if (activeTab === "comments") {
    columns = [
      { field: "postId", headerName: "Post Id", width: 90 },
      { field: "id", headerName: "id", width: 150 },
      { field: "name", headerName: "Name", width: 150 },
      { field: "email", headerName: "Email", width: 110 },
      { field: "body", headerName: "Body", width: 150 },
    ];
  } else if (activeTab === "users") {
    columns = [
      { field: "id", headerName: "Id", width: 90 },
      { field: "name", headerName: "Name", width: 150 },
      { field: "username", headerName: "User Name", width: 150 },
      { field: "email", headerName: "Email", width: 110 },
      { field: "phone", headerName: "Phone", width: 110 },
      { field: "website", headerName: "Website", width: 110 },
      { field: "company.name", headerName: "Company", width: 110 },
      {
        field: "address",
        headerName: "Address",
        width: 110,
        valueGetter: (params: any) => {
          const street = params?.row?.address?.street || "";
          const suite = params?.row?.address?.suite || "";
          const city = params?.row?.address?.city || "";
          return params?.row?.address && `${street}, ${suite}, ${city}`;
        },
      },
    ];
  }

  const getLocalStorageData = (key: string): any[] | null => {
    const storedData = localStorage.getItem(key);
    return storedData ? JSON.parse(storedData) : null;
  };

  const storeDataToLocalStorage = (key: string, val: any[]) => {
    localStorage.setItem(key, JSON.stringify(val));
  };

  return (
    <div>
      <div className="flex">
        <button
          className={`py-2 px-4 mr-2 ${
            activeTab === "users"
              ? "bg-blue-500 text-white"
              : "bg-gray-300 text-gray-700"
          }`}
          onClick={() => handleTabChange("users")}
        >
          Users
        </button>
        <button
          className={`py-2 px-4 mr-2 ${
            activeTab === "posts"
              ? "bg-blue-500 text-white"
              : "bg-gray-300 text-gray-700"
          }`}
          onClick={() => handleTabChange("posts")}
        >
          Posts
        </button>
        <button
          className={`py-2 px-4 ${
            activeTab === "comments"
              ? "bg-blue-500 text-white"
              : "bg-gray-300 text-gray-700"
          }`}
          onClick={() => handleTabChange("comments")}
        >
          Comments
        </button>
      </div>

      <CustomDataGrid
        type={activeTab}
        columns={columns}
        rows={data && data.length !== 0 ? data : getLocalStorageData(activeTab)}
      />
    </div>
  );
}

export default App;
